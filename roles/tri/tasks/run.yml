---
- name: Check for {{ creates }} ({{ src }})
  stat:
    path: '{{ dest }}/{{ creates }}'
  register: stat_result
  when: creates is defined

- name: Download backup from tri
  get_url:
    url: '{{ tri_down }}/{{ secrets.tri.hidden }}/{{ (sub + "/") | default("") }}{{ src }}.tar.gz'
    dest: /tmp/{{ src }}.tar.gz
    username: '{{ inventory_hostname }}'
    password: '{{ secrets.tri.password }}'
  register: http_result
  when: (creates is not defined) or not (stat_result.stat.exists | default(false))
  failed_when:
    - http_result.failed
    - (http_result.status_code | default(-1)) not in [200, 404]

- name: Unpack backup
  unarchive:
    src: /tmp/{{ src | replace('/', '_') }}.tar.gz
    dest: '{{ dest | dirname }}'
    remote_src: true
  when: (http_result.status_code | default(-1)) == 200

- name: Compose backup cron name
  set_fact:
    cron_name: 'backup_{{ ((sub | replace("/", "-")) + "-" ) | default("") }}{{ src }}'

- name: Generate script ({{ cron_name }})
  template:
    src: backup.j2
    dest: '{{ cron_dir }}/{{ cron_name }}'
    owner: root
    group: root
    mode: '0770'
    lstrip_blocks: True

- name: Register cron ({{ cron_name }})
  cron:
    name: '{{ cron_name }}'
    job: '{{ cron_dir }}/{{ cron_name }} &> /dev/null'
    hour: '{{ cron_stop | random(start=cron_start) }}'
    minute: '{{ 60 | random }}'
